{"version":3,"sources":["components/SearchBar.jsx","components/LayersCheckBox.jsx","scripts/js-itm.js","components/Map.jsx","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","handleChange","address","setState","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","changeCenter","catch","error","console","state","mapRef","center","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","id","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","React","Component","LayersCheckBox","displayLayer","e","getLayer","layers","display","Object","keys","key","index","marginTop","for","margin","type","name","nextProps","callback","JSITM","lat","lng","alt","precision","LatLng","prototype","toString","round","n","m","Math","pow","convertGrid","from","to","translation","point","latLngToPoint","translated","translate","pointToLatLng","latlngFromString","s","pattern","RegExp","latlng","match","parseFloat","Point","x","y","z","Translation","dx","dy","dz","inverse","Ellipsoid","a","b","e2","RootXYSqr","sqrt","radlat1","atan2","V","sin","radlat2","abs","PI","radlat","radlng","cos","TM","ellipsoid","e0","n0","f0","lat0","lng0","radlat0","radlng0","af0","bf0","n2","n3","Marc","InitialLat","M","unproject","Et","PHId","nu","rho","eta2","VII","tan","VIII","IX","X","XI","XII","XIIA","project","RadPHI","RadLAM","p","I","II","III","IIIA","IV","VI","GRS80","WGS84","GRS80toWGS84","WGS84toGRS80","ITM","point2ItmRef","zeropad","num","len","str","String","length","div","east","north","itmRef2Point","ref","mult","parseInt","itm2gps","gps2itm","wgs84","itmRef2gps","itmRef2gpsRef","gpsRef2itm","gpsRef2itmRef","Map","handleCenterCallBack","newCenter","setCenter","handleApiLoaded","maps","mapOverlay","self","mapType","window","google","ImageMapType","getTileUrl","coord","zoom","dynamicLayers","bbox","tileCoordsToBBox","ne","split","sw","convertObjectToString","layersIds","getDiv","offsetWidth","offsetHeight","isPng","tileSize","Size","opacity","overlayMapTypes","push","st","ids","entries","minScale","maxScale","slice","layerKey","target","checked","dynamicLayer","createRef","tileWidth","tileHeight","proj","getProjection","scale","fromPointToLatLng","axios","post","Headers","origin","res","data","filteredLayers","idx","layer","layerID","caption","source","mapLayerId","Helmet","src","height","width","bootstrapURLKeys","libraries","defaultZoom","defaultCenter","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","onZoomAnimationEnd","bind","initLayers","NavBar","switcher","path","Navbar","bg","variant","Container","Brand","Nav","Link","as","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.5d27c432.chunk.js","sourcesContent":["import React from 'react';\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\n \r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { address: '', \r\n                    mapRef: this.props.mapRef,\r\n                    center: this.center\r\n                  };\r\n  }\r\n \r\n  handleChange = address => {\r\n    this.setState({ address });\r\n  };\r\n \r\n  /*\r\n  handles user selection of an address from a dropdown list.\r\n  */\r\n  handleSelect = address => {\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => {\r\n        this.props.changeCenter(latLng)\r\n      })\r\n      .catch(error => console.error('Error', error));;\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n        <PlacesAutocomplete\r\n          value={this.state.address}\r\n          onChange={this.handleChange}\r\n          onSelect={this.handleSelect}\r\n        >\r\n          {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n            <div>\r\n              <div className=\"search\">\r\n              <input id=\"search\"\r\n                {...getInputProps({\r\n                  placeholder: 'Search Places ...',\r\n                  className: 'location-search-input',\r\n                })}\r\n              />\r\n              </div>\r\n              <div className=\"autocomplete-dropdown-container\">\r\n                {loading && <div>Loading...</div>}\r\n                {suggestions.map(suggestion => {\r\n                  const className = suggestion.active\r\n                    ? 'suggestion-item--active'\r\n                    : 'suggestion-item';\r\n                  const style = suggestion.active\r\n                    ? { backgroundColor: '#EAEAEA', cursor: 'pointer' }\r\n                    : { backgroundColor: '#dddff6', cursor: 'pointer' };\r\n                  return (\r\n                    <div\r\n                      {...getSuggestionItemProps(suggestion, {\r\n                        className,\r\n                        style,\r\n                      })}\r\n                    >\r\n                      <span>{suggestion.description}</span>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </PlacesAutocomplete>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar","import React, { Component } from 'react';\r\n\r\nclass LayersCheckBox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            layers: this.props.layers,\r\n        }\r\n        \r\n    }\r\n/*\r\ncalls a parent method inorder to get the chosen layer\r\n*/\r\ndisplayLayer = (e) =>{\r\n    this.props.getLayer(e)\r\n}\r\n\r\n    render() { \r\n        const {layers} = this.state;\r\n\r\n        return ( <>\r\n                <ul style={{display: 'inline-block'}}> \r\n                    <strong>:בחר שכבה להצגה</strong>\r\n                    {Object.keys(this.state.layers).map((key, index) => {\r\n                        return (\r\n                            <div key={index} style={{marginTop: '5px'}}>\r\n                                <label className=\"form-check-label\" for=\"flexCheckDefault\">\r\n                                    <input value={key} style={{margin: '3px'}} onChange={this.displayLayer} className=\"form-check-input\" type=\"checkbox\" id=\"flexCheckDefault\"/>\r\n                                    {this.state.layers[key].name}\r\n                                </label>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </> );\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState({ layers: nextProps.layers });  \r\n      }\r\n\r\n    componentWillUnmount() {\r\n        // fix Warning: Can't perform a React state update on an unmounted component\r\n        this.setState = (state,callback)=>{\r\n            return;\r\n        };\r\n    }\r\n}\r\n \r\nexport default LayersCheckBox","/**\r\n * @fileOverview js-itm: a Javascript library for converting between Israel Transverse Mercator (ITM) and GPS (WGS84) coordinates.<p>\r\n * <a href=\"http://code.google.com/p/js-itm/\">http://code.google.com/p/js-itm/</a>\r\n * @author Udi Oron (udioron at g mail dot com)\r\n * @author forked from <a href=\"http://www.nearby.org.uk/tests/GeoTools.html\">GeoTools</a> by Paul Dixon\r\n * @copyright <a href=\"http://www.gnu.org/copyleft/gpl.html\">GPL</a>\r\n * @version 0.1.1 ($Rev$ $Date$)\r\n */\r\n\r\n/**\r\n * Parent namespace for the entire library\r\n * @namespace\r\n */\r\n export var JSITM = {};\r\n\r\n /**************************************************************/\r\n \r\n /**\r\n  * Creates a new LatLng.\r\n  * \r\n  * @class holds geographic coordinates measured in degrees.<br/>\r\n  * <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate\">http://en.wikipedia.org/wiki/Geographic_coordinate</a>\r\n  *\r\n  * @constructor\r\n  * @param {Number} lat latitude in degrees ( http://en.wikipedia.org/wiki/Latitude )\r\n  * @param {Number} lng longtitude in degrees ( http://en.wikipedia.org/wiki/Longitude )\r\n  * @param {Number} alt altitude in meters above the uesd geoid surface - this was not used or tested - please keep this always 0.\r\n  * @param {Number} precision number of digits after the decimal point, used in printout. see toString().\r\n  */\r\n JSITM.LatLng = function(lat, lng, alt, precision){\r\n     this.lat = lat;\r\n     this.lng = lng;\r\n     this.alt = alt || 0;\r\n     this.precision = precision || 5;\r\n }\r\n \r\n /**\r\n  * Returns Latlng as string, using the defined preccision\r\n  * @return {String}\r\n  */\r\n JSITM.LatLng.prototype.toString = function(){\r\n \r\n     function round(n, precision){\r\n         var m = Math.pow(10, precision || 0);\r\n         return Math.round(n * m) / m;\r\n     }\r\n     \r\n     return round(this.lat, this.precision) + \" \" + round(this.lng, this.precision);\r\n }\r\n \r\n /**\r\n  * Creates a new LatLng by converting coordinates from a source ellipsoid to a target one. <p>\r\n  * This process involves:<p>\r\n  *   1. converting the angular latlng to cartesian coordinates using latLngToPoint()<p>\r\n  *   2. translating the XYZ coordinates using a translation, with special values supplied to this translation.<p>\r\n  *   3. converting the translated XYZ coords back to a new angular LatLng<p>\r\n  *<p>\r\n  *  for example refer to {@link JSITM.itm2gps}\r\n  *\r\n  * @param {JSITM.Ellipsoid} from source elli\r\n  * @param {JSITM.Ellipsoid} to\r\n  * @param {JSITM.Translation} translation\r\n  * @return {JSITM.LatLng}\r\n  */\r\n JSITM.LatLng.prototype.convertGrid = function(from, to, translation){\r\n \r\n     var point = from.latLngToPoint(this, 0);\r\n     \r\n     //removed 7 point Helmert translation (not needed in Israel's grids)\r\n     var translated = translation.translate(point);\r\n     \r\n     return to.pointToLatLng(translated);\r\n }\r\n \r\n /**\r\n  * Parses latitude and longtitude in a string into a new Latlng\r\n  * @param {String} s\r\n  * @return {JSITM.LatLng}\r\n  */\r\n JSITM.latlngFromString = function(s) {\r\n     var pattern = new RegExp(\"^(-?\\\\d+(?:\\\\.\\\\d*)?)(?:(?:\\\\s*[:,]?\\\\s*)|\\\\s+)(-?\\\\d+(?:\\\\.\\\\d*)?)$\", \"i\")\r\n     var latlng = s.match(pattern);\r\n     if (latlng) {\r\n         var lat = parseFloat(latlng[1], 10);\r\n         var lng = parseFloat(latlng[2], 10);\r\n         return new JSITM.LatLng(lat, lng);\r\n     }\r\n \r\n     throw (\"could not parse latlng\")\r\n }\r\n \r\n /**************************************************************/\r\n \r\n /**\r\n  * Creates a new Point.\r\n  * @class holds 2D/3D cartesian coordinates.\r\n  * \r\n  * @constructor\r\n  * @param {Number} x\r\n  * @param {Number} y\r\n  * @param {Number} z\r\n  * @return {JSITM.Point}\r\n  */\r\n JSITM.Point = function(x, y, z){\r\n     this.y = y;\r\n     this.x = x;\r\n     this.z = z || 0;\r\n }\r\n \r\n /**\r\n  * Returns a string containing the Point coordinates in meters\r\n  * @return {String}\r\n  */\r\n JSITM.Point.prototype.toString = function(){\r\n     \r\n     return Math.round(this.x) + \" \" + Math.round(this.y);\r\n }\r\n \r\n \r\n /**************************************************************/\r\n \r\n /**\r\n  * Creates a new Translation.\r\n  * <p>\r\n  * (Helmert translation were depracted since they are not used in the ITM - feel free to add them back from geotools if you need them! :-) )\r\n  * \r\n  * @constructor \r\n  * @param {Number} dx\r\n  * @param {Number} dy\r\n  * @param {Number} dz\r\n  */\r\n JSITM.Translation = function(dx, dy, dz){\r\n     this.dx = dx;\r\n     this.dy = dy;\r\n     this.dz = dz;\r\n }\r\n \r\n /**\r\n  * Return a new translated Point. (Original point kept intact)\r\n  *\r\n  * @param {JSITM.Point} point original point.\r\n  * @return {JSITM.Point}\r\n  */\r\n JSITM.Translation.prototype.translate = function(point){\r\n     return new JSITM.Point(point.x + this.dx, point.y + this.dy, point.z + this.dz);\r\n }\r\n \r\n /**\r\n  * Returns an new Translation with inverse values.\r\n  * @return {JSITM.Translation}\r\n  */\r\n JSITM.Translation.prototype.inverse = function(){\r\n     return new JSITM.Translation(-this.dx, -this.dy, -this.dz);\r\n }\r\n \r\n /**************************************************************/\r\n \r\n /**\r\n  * Creates a new Ellipsoid.<p>\r\n  * for more info see <a href=\"http://en.wikipedia.org/wiki/Reference_ellipsoid\">http://en.wikipedia.org/wiki/Reference_ellipsoid</a>\r\n  *\r\n  * @constructor\r\n  * @param {Number} a length of the equatorial radius (the semi-major axis) in meters\r\n  * @param {Number} b length of the polar radius (the semi-minor axis) in meters\r\n  */\r\n JSITM.Ellipsoid = function(a, b){\r\n     this.a = a;\r\n     this.b = b;\r\n     \r\n     // Compute eccentricity squared\r\n     this.e2 = (Math.pow(a, 2) - Math.pow(b, 2)) / Math.pow(a, 2);\r\n     \r\n }\r\n \r\n /**************************************************************/\r\n \r\n /**\r\n  * Creates a new LatLng containing an angular representation of a cartesian Point on the surface of the Ellipsoid.\r\n  *\r\n  * @param {JSITM.Point} point\r\n  * @return {JSITM.LatLng}\r\n  */\r\n JSITM.Ellipsoid.prototype.pointToLatLng = function(point){\r\n \r\n     var RootXYSqr = Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\r\n     \r\n     var radlat1 = Math.atan2(point.z, (RootXYSqr * (1 - this.e2)));\r\n     \r\n     do {\r\n         var V = this.a / (Math.sqrt(1 - (this.e2 * Math.pow(Math.sin(radlat1), 2))));\r\n         var radlat2 = Math.atan2((point.z + (this.e2 * V * (Math.sin(radlat1)))), RootXYSqr);\r\n         if (Math.abs(radlat1 - radlat2) > 0.000000001) {\r\n             radlat1 = radlat2;\r\n         }\r\n         else {\r\n             break;\r\n         }\r\n     }\r\n     while (true);\r\n     \r\n     var lat = radlat2 * (180 / Math.PI);\r\n     var lng = Math.atan2(point.y, point.x) * (180 / Math.PI);\r\n     \r\n     return new JSITM.LatLng(lat, lng);\r\n }\r\n \r\n /**\r\n  * Creates a new Point object containing a cartesian representation of an angular LatLng on the surface of the Ellipsoid.\r\n  *\r\n  * @param {JSITM.LatLng} latlng\r\n  * @return {JSITM.Point}\r\n  */\r\n JSITM.Ellipsoid.prototype.latLngToPoint = function(latlng){\r\n     // Convert angle measures to radians\r\n     var radlat = latlng.lat * (Math.PI / 180);\r\n     var radlng = latlng.lng * (Math.PI / 180);\r\n     \r\n     // Compute nu\r\n     var V = this.a / (Math.sqrt(1 - (this.e2 * (Math.pow(Math.sin(radlat), 2)))));\r\n     \r\n     // Compute XYZ\r\n     var x = (V + latlng.alt) * (Math.cos(radlat)) * (Math.cos(radlng));\r\n     var y = (V + latlng.alt) * (Math.cos(radlat)) * (Math.sin(radlng));\r\n     var z = ((V * (1 - this.e2)) + latlng.alt) * (Math.sin(radlat));\r\n     \r\n     return new JSITM.Point(x, y, z);\r\n }\r\n \r\n /**\r\n  * Cretaes a new TM (Transverse Mercator Projection).<br>\r\n  * For more info see <a href=\"http://en.wikipedia.org/wiki/Transverse_Mercator\">http://en.wikipedia.org/wiki/Transverse_Mercator</a>\r\n  *\r\n  * @constructor\r\n  * @param {JSITM.Ellipsoid} reference ellipsoid\r\n  * @param {Number} e0 eastings of false origin in meters\r\n  * @param {Number} n0 northings of false origin in meters\r\n  * @param {Number} f0 central meridian scale factor\r\n  * @param {Number} lat0 latitude of false origin in decimal degrees.\r\n  * @param {Number} lng0 longitude of false origin in decimal degrees.\r\n  */\r\n JSITM.TM = function(ellipsoid, e0, n0, f0, lat0, lng0){\r\n     //eastings (e0) and northings (n0) of false origin in meters; _\r\n     //central meridian scale factor (f0) and _\r\n     //latitude (lat0) and longitude (lng0) of false origin in decimal degrees.\r\n     \r\n     this.ellipsoid = ellipsoid;\r\n     this.e0 = e0;\r\n     this.n0 = n0;\r\n     this.f0 = f0;\r\n     this.lat0 = lat0;\r\n     this.lng0 = lng0;\r\n     \r\n     this.radlat0 = lat0 * (Math.PI / 180);\r\n     this.radlng0 = lng0 * (Math.PI / 180);\r\n     \r\n     this.af0 = ellipsoid.a * f0;\r\n     this.bf0 = ellipsoid.b * f0;\r\n     this.e2 = (Math.pow(this.af0, 2) - Math.pow(this.bf0, 2)) / Math.pow(this.af0, 2);\r\n     this.n = (this.af0 - this.bf0) / (this.af0 + this.bf0);\r\n     this.n2 = this.n * this.n; //for optimizing and clarity of Marc()\r\n     this.n3 = this.n2 * this.n; //for optimizing and clarity of Marc()\r\n     \r\n }\r\n \r\n /**\r\n  * Compute meridional arc\r\n  * @private\r\n  * @param {Number} radlat latitude of meridian in radians\r\n  * @return {Number}\r\n  */\r\n JSITM.TM.prototype.Marc = function(radlat){\r\n     \r\n     return (\r\n         this.bf0 * (\r\n             ((1 + this.n + ((5 / 4) * this.n2) + ((5 / 4) * this.n3)) * (radlat - this.radlat0)) - \r\n             (((3 * this.n) + (3 * this.n2) + ((21 / 8) * this.n3)) * (Math.sin(radlat - this.radlat0)) * (Math.cos(radlat + this.radlat0))) + \r\n             ((((15 / 8) * this.n2) + ((15 / 8) * this.n3)) * (Math.sin(2 * (radlat - this.radlat0))) * (Math.cos(2 * (radlat + this.radlat0)))) - \r\n             (((35 / 24) * this.n3) * (Math.sin(3 * (radlat - this.radlat0))) * (Math.cos(3 * (radlat + this.radlat0))))\r\n         )\r\n     );\r\n         \r\n \r\n }\r\n \r\n /**\r\n  * Returns the  initial value for Latitude in radians.\r\n  * @private\r\n  * @param {Number} y northings of point\r\n  * @return {Number}\r\n  */\r\n JSITM.TM.prototype.InitialLat = function(y){\r\n   \r\n     var radlat1 = ((y - this.n0) / this.af0) + this.radlat0;\r\n \r\n     var M = this.Marc(radlat1);\r\n     \r\n     var radlat2 = ((y - this.n0 - M) / this.af0) + radlat1;\r\n     \r\n     while (Math.abs(y - this.n0 - M) > 0.00001) {\r\n         radlat2 = ((y - this.n0 - M) / this.af0) + radlat1;\r\n         M = this.Marc(radlat2);\r\n         radlat1 = radlat2;\r\n     }\r\n     return radlat2;\r\n }\r\n \r\n /**\r\n  * Un-project Transverse Mercator eastings and northings back to latitude and longtitude.\r\n  * \r\n  * @param {JSITM.Point} point\r\n  * @return {JSITM.LatLng} latitude and longtitude on the refernced ellipsoid's surface\r\n  */\r\n \r\n JSITM.TM.prototype.unproject = function(point){\r\n     //\r\n     //Input: - _\r\n     \r\n     //Compute Et\r\n     var Et = point.x - this.e0;\r\n     \r\n     //Compute initial value for latitude (PHI) in radians\r\n     var PHId = this.InitialLat(point.y);\r\n     \r\n     //Compute nu, rho and eta2 using value for PHId\r\n     var nu = this.af0 / (Math.sqrt(1 - (this.e2 * (Math.pow(Math.sin(PHId), 2)))));\r\n     var rho = (nu * (1 - this.e2)) / (1 - (this.e2 * Math.pow(Math.sin(PHId), 2)));\r\n     var eta2 = (nu / rho) - 1;\r\n     \r\n     //Compute Latitude\r\n     var VII = (Math.tan(PHId)) / (2 * rho * nu);\r\n     var VIII = ((Math.tan(PHId)) / (24 * rho * Math.pow(nu, 3))) * (5 + (3 * Math.pow(Math.tan(PHId), 2)) + eta2 - (9 * eta2 * (Math.pow(Math.tan(PHId), 2))));\r\n     var IX = (Math.tan(PHId) / (720 * rho * Math.pow(nu, 5))) * (61 + (90 * Math.pow(Math.tan(PHId), 2)) + (45 * (Math.pow(Math.tan(PHId), 4))));\r\n     \r\n     var lat = (180 / Math.PI) * (PHId - (Math.pow(Et, 2) * VII) + (Math.pow(Et, 4) * VIII) - (Math.pow(Et, 6) * IX));\r\n     \r\n     //Compute Longitude\r\n     var X = (Math.pow(Math.cos(PHId), -1)) / nu;\r\n     var XI = ((Math.pow(Math.cos(PHId), -1)) / (6 * Math.pow(nu, 3))) * ((nu / rho) + (2 * (Math.pow(Math.tan(PHId), 2))));\r\n     var XII = ((Math.pow(Math.cos(PHId), -1)) / (120 * Math.pow(nu, 5))) * (5 + (28 * (Math.pow(Math.tan(PHId), 2))) + (24 * (Math.pow(Math.tan(PHId), 4))));\r\n     var XIIA = ((Math.pow(Math.cos(PHId), -1)) / (5040 * Math.pow(nu, 7))) * (61 + (662 * (Math.pow(Math.tan(PHId), 2))) + (1320 * (Math.pow(Math.tan(PHId), 4))) + (720 * (Math.pow(Math.tan(PHId), 6))));\r\n     \r\n     var lng = (180 / Math.PI) * (this.radlng0 + (Et * X) - (Math.pow(Et, 3) * XI) + (Math.pow(Et, 5) * XII) - (Math.pow(Et, 7) * XIIA));\r\n     \r\n     var latlng = new JSITM.LatLng(lat, lng);\r\n     \r\n     return (latlng);\r\n }\r\n \r\n \r\n /**\r\n  * Project Latitude and longitude to Transverse Mercator coordinates\r\n  * @param {JSITM.LatLng} latitude and longtitude  to convert\r\n  * @return {JSITM.Point} projected coordinates \r\n  */\r\n JSITM.TM.prototype.project = function(latlng){\r\n     // Convert angle measures to radians\r\n     var RadPHI = latlng.lat * (Math.PI / 180);\r\n     var RadLAM = latlng.lng * (Math.PI / 180);\r\n     \r\n     var nu = this.af0 / (Math.sqrt(1 - (this.e2 * Math.pow(Math.sin(RadPHI), 2))));\r\n     var rho = (nu * (1 - this.e2)) / (1 - (this.e2 * Math.pow(Math.sin(RadPHI), 2)));\r\n     var eta2 = (nu / rho) - 1;\r\n     var p = RadLAM - this.radlng0;\r\n     var M = this.Marc(RadPHI);\r\n     \r\n     var I = M + this.n0;\r\n     var II = (nu / 2) * (Math.sin(RadPHI)) * (Math.cos(RadPHI));\r\n     var III = ((nu / 24) * (Math.sin(RadPHI)) * (Math.pow(Math.cos(RadPHI), 3))) * (5 - (Math.pow(Math.tan(RadPHI), 2)) + (9 * eta2));\r\n     var IIIA = ((nu / 720) * (Math.sin(RadPHI)) * (Math.pow(Math.cos(RadPHI), 5))) * (61 - (58 * (Math.pow(Math.tan(RadPHI), 2))) + (Math.pow(Math.tan(RadPHI), 4)));\r\n     \r\n     var y = I + (Math.pow(p, 2) * II) + (Math.pow(p, 4) * III) + (Math.pow(p, 6) * IIIA);\r\n     \r\n     var IV = nu * (Math.cos(RadPHI));\r\n     var V = (nu / 6) * (Math.pow(Math.cos(RadPHI), 3)) * ((nu / rho) - (Math.pow(Math.tan(RadPHI), 2)));\r\n     var VI = (nu / 120) * (Math.pow(Math.cos(RadPHI), 5)) * (5 - (18 * (Math.pow(Math.tan(RadPHI), 2))) + (Math.pow(Math.tan(RadPHI), 4)) + (14 * eta2) - (58 * (Math.pow(Math.tan(RadPHI), 2)) * eta2));\r\n     \r\n     var x = this.e0 + (p * IV) + (Math.pow(p, 3) * V) + (Math.pow(p, 5) * VI);\r\n     \r\n     return new JSITM.Point(x, y, 0)\r\n }\r\n \r\n /** Juicy part 1 ***************************************************************************/\r\n \r\n /**\r\n  * Ellipsoid for GRS80 (The refernce ellipsoid of ITM\r\n  * @see http://en.wikipedia.org/wiki/GRS80\r\n  * @type JSITM.Ellipsoid\r\n  */\r\n JSITM.GRS80 = new JSITM.Ellipsoid(6378137, 6356752.31414); \r\n \r\n /**\r\n  * Ellipsoid for WGS84 (Used by GPS)\r\n  * @see http://en.wikipedia.org/wiki/WGS80\r\n  * @type JSITM.Ellipsoid\r\n  */\r\n JSITM.WGS84 = new JSITM.Ellipsoid(6378137, 6356752.314245);\r\n \r\n /**\r\n  * Simple Translation from GRS80 to WGS84\r\n  * @see http://spatialreference.org/ref/epsg/2039/\r\n  * @type JSITM.Translation\r\n  */\r\n JSITM.GRS80toWGS84 = new JSITM.Translation(-48, 55, 52); \r\n \r\n /**\r\n  * Translation back from WGS84 to GRS80\r\n  * @type JSITM.Translation\r\n  */\r\n JSITM.WGS84toGRS80 = JSITM.GRS80toWGS84.inverse();\r\n \r\n /**\r\n  * ITM (Israel Transverse Mercator) Projection \r\n  * @see http://en.wikipedia.org/wiki/Israeli_Transverse_Mercator\r\n  * @type JSITM.TM\r\n  */\r\n JSITM.ITM = new JSITM.TM(JSITM.GRS80, 219529.58400, 626907.38999, 1.000006700000000, 31.734394, 35.204517);\r\n \r\n \r\n /** Juicy part 2 ***************************************************************************/\r\n \r\n /**\r\n  * Converts a point to an ITM reference.\r\n  * \r\n  * @example \r\n  *   JSITM.point2ItmRef(new JSITM.Point(200, 500)); // prints \"200000500000\"\r\n  *   JSITM.point2ItmRef(new JSITM.Point(200, 500), 3); // prints \"200500\"\r\n  * @param {JSITM.Point} point\r\n  * @param {Number} precision 3=km, 4=100 meter, 5=decameter 6=meter.  optional, default is 6,\r\n  * @return {String}\r\n  */\r\n JSITM.point2ItmRef = function(point, precision){\r\n \r\n     function zeropad(num, len){\r\n         var str = new String(num);\r\n         while (str.length < len) {\r\n             str = '0' + str;\r\n         }\r\n         return str;\r\n     }\r\n     \r\n     var p = precision || 6; \r\n \r\n     if (p < 3) \r\n         p = 3;\r\n     if (p > 6) \r\n         p = 6;\r\n     \r\n     var div = Math.pow(10, (6 - p));\r\n     var east = Math.round(point.x / div);\r\n     var north = Math.round(point.y / div);\r\n     return zeropad(east, p) + ' ' + zeropad(north, p);\r\n     \r\n }\r\n \r\n /**\r\n  * Parses an ITM reference and returns a Point object.<p>\r\n  * throws an exception for invalid refernce!<p>\r\n  * <p>\r\n  * @example valid inputs:\r\n  *  200500\r\n  *  20005000\r\n  *  2000000500000\r\n  *  130:540\r\n  *  131550:44000\r\n  *  131 400\r\n  *  210222 432111\r\n  * \r\n  * @param {String} s\r\n  * @return {JSITM.Point}\r\n  */\r\n JSITM.itmRef2Point = function(s){\r\n     \r\n     var precision;\r\n     \r\n     for (precision = 6; precision >= 3; precision--) {\r\n         var pattern = new RegExp(\"^(\\\\d{\" + precision + \"})\\\\s*:?\\\\s*(\\\\d{\" + precision + \"})$\", \"i\")\r\n         var ref = s.match(pattern);\r\n         if (ref) {\r\n             if (precision > 0) {\r\n                 var mult = Math.pow(10, 6 - precision);\r\n                 var x = parseInt(ref[1], 10) * mult;\r\n                 var y = parseInt(ref[2], 10) * mult;\r\n                 return new JSITM.Point(x, y);\r\n             }\r\n         }\r\n     }\r\n     \r\n     throw \"Could not parse reference\";\r\n }\r\n \r\n \r\n /** Juicy part 3 ***************************************************************************/\r\n \r\n /**\r\n  * Converts a Point on ITM to a LatLng on GPS \r\n  * @param {JSITM.Point} point\r\n  * @return {JSITM.LatLng}\r\n  */\r\n JSITM.itm2gps = function(point){\r\n     var latlng = this.ITM.unproject(point); //however, latlng is still on GRS80!\r\n     return latlng.convertGrid(this.GRS80, this.WGS84, this.GRS80toWGS84);\r\n }\r\n \r\n /**\r\n  * Converts a LatLng on GPS to a Point on ITM\r\n  * @param {JSITM.LatLng} latlng\r\n  * @return {JSITM.Point}\r\n  */\r\n \r\n JSITM.gps2itm = function(latlng){\r\n     var wgs84 = latlng.convertGrid(this.WGS84, this.GRS80, this.WGS84toGRS80); //first convert to GRS80\r\n     return this.ITM.project(wgs84);\r\n }\r\n \r\n /** Juicy part 4 ***************************************************************************/\r\n \r\n /**\r\n  * Converts an ITM grid refernece in 6, 8, 10 or 12 digits to a GPS angular Point instace\r\n  * @param {String} s\r\n  * @return {JSITM.Point}\r\n  */\r\n JSITM.itmRef2gps = function(s){\r\n     var point = this.itmRef2Point(s);\r\n     return this.itm2gps(point);\r\n }\r\n \r\n /**\r\n  * Converts an ITM grid refernece in 6, 8, 10 or 12 digits to a GPS angular reference\r\n  * @param {String} s\r\n  * @return {String}\r\n  */\r\n JSITM.itmRef2gpsRef = function(s){\r\n     return this.itmRef2gps(s).toString();\r\n }\r\n \r\n /**\r\n  * Converts a GPS angular reference to an ITM LatLng instance\r\n  * @param {String} s\r\n  * @return {JSITM.LatLng} \r\n  */\r\n \r\n JSITM.gpsRef2itm = function(s){\r\n     var latlng = this.latlngFromString(s);\r\n     return this.gps2itm(latlng);\r\n }\r\n \r\n /**\r\n  * Converts a GPS angular reference to an ITM grid refernece in 6, 8, 10 or 12 digits\r\n  * @param {String} s\r\n  * @param {Number} precision 3=km, 4=100 meter, 5=decameter 6=meter. Optional.  Default value is 6=meter\r\n  * @return {String} \r\n  */\r\n \r\n JSITM.gpsRef2itmRef = function(s, precision){\r\n     return this.point2ItmRef(this.gpsRef2itm(s), precision || 6);\r\n }\r\n ","import React, { Component } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport SearchBar from './SearchBar'\r\nimport LayersCheckBox from './LayersCheckBox'\r\nimport {Helmet} from \"react-helmet\"\r\nimport {JSITM} from '../scripts/js-itm.js'\r\nimport axios from 'axios'\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { center: {lat: 31.771959, lng:35.217018},\r\n                        zoom: 12,\r\n                        map: null,\r\n                        layers: [],\r\n                        dynamicLayers: {},\r\n                        layersIds: [] \r\n                        };\r\n        this.mapRef = React.createRef((ref) => {\r\n            this.mapRef = ref\r\n        });\r\n    }\r\n\r\n    /*\r\n    handles map center change in location.\r\n    */\r\n    handleCenterCallBack = (newCenter) => {\r\n        this.state.map.setCenter(newCenter);\r\n    }\r\n\r\n    /*\r\n    handles map api load\r\n    */\r\n    handleApiLoaded = (map, maps) => {\r\n        this.setState({map: map})\r\n    }\r\n\r\n    /*\r\n    converts tile coords to boundary box (global coords)\r\n    */\r\n    tileCoordsToBBox(map, coord, zoom, tileWidth, tileHeight) {\r\n        var proj = map.getProjection();\r\n    \r\n        // scale is because the number of tiles shown at each zoom level double.\r\n        var scale = Math.pow(2, zoom);\r\n    \r\n        // A point is created for the north-east and south-west corners, calculated\r\n        // by taking the tile coord and multiplying it by the tile's width and the map's scale.\r\n        var ne = proj.fromPointToLatLng(new window.google.maps.Point( (coord.x+1) * tileWidth / scale, coord.y * tileHeight / scale));\r\n        var sw = proj.fromPointToLatLng(new window.google.maps.Point( coord.x * tileWidth / scale, (coord.y+1) * tileHeight / scale));\r\n    \r\n        return [\r\n            ne.lat(),\r\n            ne.lng(),\r\n            sw.lat(),\r\n            sw.lng()          \r\n        ];\r\n    }\r\n\r\n\r\n    /*\r\n    overlaying an image (layer) on the map\r\n    */\r\n    mapOverlay = () => {\r\n        var tileWidth = 512,\r\n        tileHeight = 512;\r\n        let self = this;\r\n\r\n        let mapType = new window.google.maps.ImageMapType({\r\n            getTileUrl: function (coord, zoom) {\r\n                if (zoom >= 16 && Object.keys(self.state.dynamicLayers).length > 0) {\r\n                    // The call to our earlier function\r\n                    var bbox = self.tileCoordsToBBox(self.state.map, coord, zoom, tileWidth, tileHeight);\r\n                    \r\n                    //converts gps coords to ITM (israel transverse mercator)\r\n                    let ne = JSITM.gpsRef2itmRef(`${bbox[0]} ${bbox[1]}`).split(\" \")\r\n                    let sw = JSITM.gpsRef2itmRef(`${bbox[2]} ${bbox[3]}`).split(\" \")\r\n                    \r\n                    if(850000 > ne[1] && ne[1] > 350000 && 850000 > sw[1] && sw[1] > 350000 && 350000 > ne[0] && ne[0] > 50000 && 350000 > sw[0] && sw[1] > 50000){\r\n                        // The server endpoint for getting the images, where we pass bbox.join(',') through\r\n                        \r\n                        var url = \"https://ags.govmap.gov.il/proxy/proxy.ashx?http://govmap/arcgis/rest/services/AdditionalData/MapServer/export?dynamicLayers=\" + self.convertObjectToString() + \r\n                        \"&dpi=96&transparent=true&format=png32&layers=show:\" + self.state.layersIds +\"&bbox=\" + \r\n                        ne[0] + \",\" + ne[1] + \",\" + sw[0] + \",\" + sw[1] + \"&bboxSR=2039&imageSR=2039&size=\" + self.state.map.getDiv().offsetWidth + \",\" + self.state.map.getDiv().offsetHeight + \"&f=image\";\r\n                        \r\n                        return url;\r\n                    }\r\n                }\r\n            },\r\n            isPng: true,\r\n            tileSize: new window.google.maps.Size(tileWidth, tileHeight),\r\n            opacity: 0.4\r\n        });\r\n        this.state.map.overlayMapTypes.push(mapType);\r\n    }\r\n\r\n    /*\r\n    creates a string that represents the layers required and some additional data.\r\n    */\r\n    convertObjectToString = () => {\r\n\r\n        let st = \"[\";\r\n        let ids = []\r\n\r\n        for(const [key, value] of Object.entries(this.state.dynamicLayers)){\r\n            ids.push(value.id)\r\n            st += \"{'id':\" + value.id + \r\n                    \",'name':'\" + value.name + \"','source':{'type':'mapLayer','mapLayerId':\" + \r\n                    value.id + \"},'minScale':\" + value.minScale + \",'maxScale':\" + \r\n                    value.maxScale + \"},\";\r\n        }\r\n\r\n        st = st.slice(0, -1)\r\n        st += \"]\";\r\n        this.setState({layersIds: ids})\r\n        return st;\r\n    }\r\n\r\n    /*\r\n    LayersCheckBox provokes that method after a layer is chosen\r\n    */\r\n    getLayer = (e) => {\r\n\r\n        const layerKey = e.target.value;\r\n        if(!e.target.checked){\r\n            let {dynamicLayers} = this.state;\r\n            delete dynamicLayers[layerKey]\r\n            this.setState({dynamicLayers: dynamicLayers});\r\n\r\n            return\r\n        }\r\n\r\n        let {dynamicLayers} = this.state\r\n        const dynamicLayer = this.state.layers[layerKey]\r\n        dynamicLayers[layerKey] = dynamicLayer\r\n\r\n        this.setState({dynamicLayers: dynamicLayers});\r\n    }\r\n\r\n    /*\r\n    gets all layers data from an endpoint\r\n    */\r\n    async initLayers(){\r\n\r\n        const res = await axios.post('https://cors.bridged.cc/https://ags.govmap.gov.il/Layers/GetTocLayers', \r\n        {\r\n            Headers: {origin: '127.0.0.1:3000'}\r\n        })  \r\n\r\n        const layers = res.data.data['שכבות ממשלה ומוסדות ציבור'].layers\r\n        let filteredLayers = {}\r\n\r\n        let idx = 0;\r\n        for(const [key, layer] of Object.entries(layers)){\r\n            \r\n            const {layerID, caption, minScale, maxScale} = layer\r\n            filteredLayers[idx] = {\r\n               id: layerID,\r\n               name: caption,\r\n               source: {\r\n                   type: 'mapLayer', \r\n                   mapLayerId: layerID\r\n               } ,\r\n               minScale: minScale,\r\n               maxScale: maxScale\r\n            }\r\n            idx += 1;\r\n        }\r\n        \r\n        this.setState({layers: filteredLayers})\r\n\r\n    }\r\n\r\n    render() { \r\n        return ( <>\r\n                    <br/>\r\n                    <div className=\"grid-container\">\r\n                        <Helmet>\r\n                            <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.12.1.min.js\"></script>\r\n                            <script type=\"text/javascript\" src=\"https://www.govmap.gov.il/govmap/api/govmap.api.js\"></script>\r\n                        </Helmet>\r\n                        <div className=\"grid-child\">\r\n                            <div id=\"map\" style={{height: '100vh', width: '950px'}}>\r\n                                <GoogleMapReact ref={this.mapRef}\r\n                                    bootstrapURLKeys={{ key: 'AIzaSyDReDgyRM1t9H2HncIec_v_zh2DeJGggT0', libraries: ['geometry','drawing','places']}}\r\n                                    defaultZoom={this.state.zoom}\r\n                                    defaultCenter={this.state.center}\r\n                                    yesIWantToUseGoogleMapApiInternals\r\n                                    onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\r\n                                    onZoomAnimationEnd={this.mapOverlay.bind(this)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"grid-child\" style={{marginTop: '20px'}}>\r\n                            <SearchBar id=\"searchBar\" mapRef={this.mapRef} center={this.center} changeCenter={this.handleCenterCallBack}></SearchBar>\r\n                            <br/>\r\n                            <LayersCheckBox layers={this.state.layers} getLayer={this.getLayer.bind(this)}></LayersCheckBox>\r\n                        </div>\r\n                    </div>\r\n                 </> );\r\n    }\r\n\r\n    async componentWillMount() {\r\n        await this.initLayers();\r\n    }\r\n\r\n}\r\n \r\nexport default Map;","import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Container from 'react-bootstrap/Container'\r\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\r\nimport Map from './Map.jsx'\r\n\r\n\r\nclass NavBar extends Component {\r\n    \r\n    switcher = () => {\r\n        return(\r\n        <Switch>\r\n            <Route path=\"/map\">\r\n                <Map />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Map />\r\n            </Route>\r\n        </Switch>\r\n        )\r\n    }\r\n\r\n    render() { \r\n        return ( <>\r\n                    <Router>\r\n                        <Navbar bg=\"dark\" variant=\"dark\">\r\n                            <Container>\r\n                                <Navbar.Brand >Urbanico</Navbar.Brand>\r\n                                <Nav className=\"me-auto\">\r\n                                    <Nav.Link as={Link} to={'/map'}>Map</Nav.Link>\r\n                                </Nav>\r\n                            </Container>\r\n                        </Navbar>\r\n                        <div>\r\n                            {this.switcher()}\r\n                        </div>\r\n                    </Router>\r\n                </> );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import './App.css';\r\nimport NavBar from './components/NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <NavBar></NavBar>\r\n      <div className=\"App\">\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}