{"version":3,"sources":["logo.svg","components/Home.jsx","components/SearchBar.jsx","components/Map.jsx","components/FutureTravels.jsx","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","state","Component","Geocode","setApiKey","process","GOOGLE_API_KEY","enableDebug","window","google","SearchBar","props","handleChange","address","setState","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","changeCenter","catch","error","console","mapRef","center","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","placeholder","map","suggestion","active","style","backgroundColor","cursor","description","React","Map","handleCenterCallBack","newCenter","addMarker","e","marker","position","lat","lng","time","Date","toISOString","markers","createClusters","type","properties","cluster","markerId","category","geometry","coordinates","zoom","bounds","mapOptions","createRef","ref","WrappedMap","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","onClick","isMarkerShown","height","width","googleMapURL","loadingElement","containerElement","mapElement","MyMarkers","FutureTravels","NavBar","switcher","path","Navbar","bg","variant","Container","Brand","href","Nav","Link","as","to","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.e9c8d01b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( <>\r\n                <h1>Home</h1>\r\n            </> );\r\n    }\r\n}\r\n \r\n\r\nexport default Home;","import React from 'react';\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport Geocode from \"react-geocode\";\r\nimport useSupercluster from 'use-supercluster';\r\nGeocode.setApiKey(process.env.GOOGLE_API_KEY);\r\nGeocode.enableDebug();\r\nconst google = window.google\r\n\r\n \r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { address: '', \r\n                    mapRef: this.props.mapRef,\r\n                    center: this.center\r\n                  };\r\n  }\r\n \r\n  handleChange = address => {\r\n    this.setState({ address });\r\n  };\r\n \r\n  /*\r\n  handles user selection of an address from a dropdown list.\r\n  */\r\n  handleSelect = address => {\r\n    geocodeByAddress(address)\r\n      .then(results => getLatLng(results[0]))\r\n      .then(latLng => {\r\n        this.props.changeCenter(latLng)\r\n      })\r\n      .catch(error => console.error('Error', error));;\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <div className=\"search\">\r\n            <input\r\n              {...getInputProps({\r\n                placeholder: 'Search Places ...',\r\n                className: 'location-search-input',\r\n              })}\r\n            />\r\n            </div>\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                // inline style for demonstration purpose\r\n                const style = suggestion.active\r\n                  ? { backgroundColor: '#08ffc8', cursor: 'pointer' }\r\n                  : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                      style,\r\n                    })}\r\n                  >\r\n                    <span>{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar","import React, { Component } from 'react';\r\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker } from 'react-google-maps';\r\nimport Geocode from \"react-geocode\";\r\nimport SearchBar from './SearchBar'\r\nimport Supercluster from 'supercluster'\r\nimport useSupercluster from 'use-supercluster'\r\nGeocode.setApiKey(process.env.GOOGLE_API_KEY);\r\nGeocode.enableDebug();\r\n\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { center: {lat: 31.771959, lng:35.217018},\r\n                        zoom: 12,\r\n                        bounds: null,\r\n                        markers: [],\r\n                        cluster: null,\r\n                        mapOptions: {\r\n                            center: {lat: 31.771959, lng:35.217018},\r\n                            zoom: 12\r\n                        }\r\n                        };\r\n        this.mapRef = React.createRef((ref) => {\r\n            this.mapRef = ref\r\n        });\r\n    }\r\n\r\n    /*\r\n    handles map center change in location.\r\n    */\r\n    handleCenterCallBack = (newCenter) => {\r\n        this.setState({center: newCenter})\r\n    }\r\n\r\n    addMarker = (e) => {\r\n        const marker = {position: {lat: e.latLng.lat(), lng: e.latLng.lng()}, time: new Date().toISOString()};\r\n        this.setState({markers: [...this.state.markers, marker]});\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     if(this.state.center.lat === nextState.center.lat){\r\n    //       return false\r\n    //     }else{\r\n    //       return true\r\n    //     }\r\n    //   }\r\n\r\n    createClusters = () => {\r\n        const points = this.state.markers.map(marker => { return {\r\n            type: \"Feature\",\r\n            properties: {\r\n                cluster: false,\r\n                markerId: marker.time,\r\n                category: \"travel-marker\"\r\n              },\r\n              geometry: { type: \"Point\", coordinates: [marker.lat, marker.lng] }\r\n        }\r\n        })\r\n\r\n    //     ({clusters} = useSupercluster({ \r\n    //       points, \r\n    //       bounds, \r\n    //       zoom,\r\n    //       options: {radius: 75, maxZoom: 20}\r\n    //   }))\r\n    }\r\n\r\n    render() { \r\n\r\n        /* \r\n        wrapps the map element as a DOM element.\r\n        */        \r\n        const WrappedMap = withScriptjs(withGoogleMap((props) =>\r\n            \r\n            <GoogleMap ref={this.mapRef}\r\n                defaultZoom={this.state.zoom}\r\n                defaultCenter={this.state.center}\r\n                onClick={this.addMarker}\r\n                // onChange={({zoom, bounds}) =>{\r\n                //     this.setState({zoom: zoom, bounds: [bounds.nw.lng,\r\n                //         bounds.se.lat,\r\n                //         bounds.se.lng,\r\n                //         bounds.nw.lat]})\r\n                // }}\r\n            >\r\n                {props.isMarkerShown && <Marker position={this.state.center} />}\r\n                <MyMarkers markers={this.state.markers}></MyMarkers>\r\n            </GoogleMap>\r\n            ))\r\n\r\n        return ( <>\r\n                    <h1>Map</h1>\r\n                    <div style={{height: '100vh', width: '100vw'}}>\r\n                        <SearchBar mapRef={this.mapRef} center={this.center} changeCenter={this.handleCenterCallBack}></SearchBar>\r\n                        <WrappedMap isMarkerShown googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyDReDgyRM1t9H2HncIec_v_zh2DeJGggT0`}\r\n                        loadingElement={<div style={{height: '100%'}}/>}\r\n                        containerElement={<div style={{height: '100%'}}/>}\r\n                        mapElement={<div style={{height: '100%'}}/>}\r\n                        />\r\n                    </div>\r\n                 </> );\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.mapRef.addEventListener('onclick', this.addMarker)\r\n    }\r\n}\r\n\r\nclass MyMarkers extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <>\r\n            {}\r\n            {this.props.markers.map((marker) => {\r\n                return (<Marker position={marker.position} key={marker.time}/>)\r\n            })}\r\n            </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Map;","import React, { Component } from 'react';\r\n\r\nclass FutureTravels extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( <>\r\n                <h1>Future Travels</h1>\r\n            </> );\r\n    }\r\n}\r\n \r\n\r\nexport default FutureTravels;","import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Container from 'react-bootstrap/Container'\r\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\r\nimport Home from './Home.jsx'\r\nimport Map from './Map.jsx'\r\nimport FutureTravels from './FutureTravels.jsx'\r\n\r\n\r\nclass NavBar extends Component {\r\n    \r\n    switcher = () => {\r\n        return(\r\n        <Switch>\r\n            <Route path=\"/home\">\r\n                <Home />\r\n            </Route>\r\n            <Route path=\"/map\">\r\n                <Map />\r\n            </Route>\r\n            <Route path=\"/futureTravels\">\r\n                <FutureTravels />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Home />\r\n            </Route>\r\n        </Switch>\r\n        )\r\n    }\r\n\r\n    render() { \r\n        return ( <>\r\n                    <Router>\r\n                        <Navbar bg=\"dark\" variant=\"dark\">\r\n                            <Container>\r\n                                <Navbar.Brand href=\"#home\">travelX</Navbar.Brand>\r\n                                <Nav className=\"me-auto\">\r\n                                    <Nav.Link as={Link} to={'/home'} >Home</Nav.Link>\r\n                                    <Nav.Link as={Link} to={'/map'}>Map</Nav.Link>\r\n                                    <Nav.Link as={Link} to={'/futureTravels'}>Future Travels</Nav.Link>\r\n                                </Nav>\r\n                            </Container>\r\n                        </Navbar>\r\n                        <div>\r\n                            {this.switcher()}\r\n                        </div>\r\n                    </Router>\r\n                </> );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <NavBar></NavBar>\r\n      <div className=\"App\">\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <App />\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}